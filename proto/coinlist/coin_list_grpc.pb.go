// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/coinlist/coin_list.proto

package go_grpc_coinlist

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CoinListClient is the client API for CoinList service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoinListClient interface {
	GetCoins(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ReturnList, error)
	GetCoin(ctx context.Context, in *Id, opts ...grpc.CallOption) (*CoinInfo, error)
	CreateCoins(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Status, error)
	SearchCoins(ctx context.Context, in *SearchText, opts ...grpc.CallOption) (*ReturnList, error)
}

type coinListClient struct {
	cc grpc.ClientConnInterface
}

func NewCoinListClient(cc grpc.ClientConnInterface) CoinListClient {
	return &coinListClient{cc}
}

func (c *coinListClient) GetCoins(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ReturnList, error) {
	out := new(ReturnList)
	err := c.cc.Invoke(ctx, "/coinlist.CoinList/GetCoins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinListClient) GetCoin(ctx context.Context, in *Id, opts ...grpc.CallOption) (*CoinInfo, error) {
	out := new(CoinInfo)
	err := c.cc.Invoke(ctx, "/coinlist.CoinList/GetCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinListClient) CreateCoins(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/coinlist.CoinList/CreateCoins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinListClient) SearchCoins(ctx context.Context, in *SearchText, opts ...grpc.CallOption) (*ReturnList, error) {
	out := new(ReturnList)
	err := c.cc.Invoke(ctx, "/coinlist.CoinList/SearchCoins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoinListServer is the server API for CoinList service.
// All implementations should embed UnimplementedCoinListServer
// for forward compatibility
type CoinListServer interface {
	GetCoins(context.Context, *Empty) (*ReturnList, error)
	GetCoin(context.Context, *Id) (*CoinInfo, error)
	CreateCoins(context.Context, *Id) (*Status, error)
	SearchCoins(context.Context, *SearchText) (*ReturnList, error)
}

// UnimplementedCoinListServer should be embedded to have forward compatible implementations.
type UnimplementedCoinListServer struct {
}

func (UnimplementedCoinListServer) GetCoins(context.Context, *Empty) (*ReturnList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoins not implemented")
}
func (UnimplementedCoinListServer) GetCoin(context.Context, *Id) (*CoinInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoin not implemented")
}
func (UnimplementedCoinListServer) CreateCoins(context.Context, *Id) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCoins not implemented")
}
func (UnimplementedCoinListServer) SearchCoins(context.Context, *SearchText) (*ReturnList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCoins not implemented")
}

// UnsafeCoinListServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoinListServer will
// result in compilation errors.
type UnsafeCoinListServer interface {
	mustEmbedUnimplementedCoinListServer()
}

func RegisterCoinListServer(s grpc.ServiceRegistrar, srv CoinListServer) {
	s.RegisterService(&CoinList_ServiceDesc, srv)
}

func _CoinList_GetCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinListServer).GetCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coinlist.CoinList/GetCoins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinListServer).GetCoins(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoinList_GetCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinListServer).GetCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coinlist.CoinList/GetCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinListServer).GetCoin(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoinList_CreateCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinListServer).CreateCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coinlist.CoinList/CreateCoins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinListServer).CreateCoins(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoinList_SearchCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchText)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinListServer).SearchCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coinlist.CoinList/SearchCoins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinListServer).SearchCoins(ctx, req.(*SearchText))
	}
	return interceptor(ctx, in, info, handler)
}

// CoinList_ServiceDesc is the grpc.ServiceDesc for CoinList service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoinList_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coinlist.CoinList",
	HandlerType: (*CoinListServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCoins",
			Handler:    _CoinList_GetCoins_Handler,
		},
		{
			MethodName: "GetCoin",
			Handler:    _CoinList_GetCoin_Handler,
		},
		{
			MethodName: "CreateCoins",
			Handler:    _CoinList_CreateCoins_Handler,
		},
		{
			MethodName: "SearchCoins",
			Handler:    _CoinList_SearchCoins_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/coinlist/coin_list.proto",
}
